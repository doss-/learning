#General
Runs w/o any daemons, but still needs a server installed on the main machine
Manages nodes which are not required to have ansible installed
Uses SSH for access the nodes, so OpenSSH-Server need to be installed
Playbooks are the thing that define and install software

When running Ansible commands, they are run against nodes
 nodes are identified by Names
List of nodes is stored in 'inventory' option of config , which points to
 a file which describes Nodes - /etc/ansible/hosts , by default
All the configuration are stored in /etc/ansible/ansible.cfg
 also could stored in ~/ansible.cfg or ./ansible.cfg, or in playbook
 or in ANSIBLE_CONFIG env var , which override all above
 Ansible.cfg also has default path for Inventory(hosts)

things to install to get ansible environment up and running:
 sudo yum install python python-devel python-pip openssl ansible


specific package dependencies for Ansible:
python-httplib2
python-jinja2
python-markupsafe
python2-crypto
python2-paramiko

##Documentation
available at ansible.com
 also see: man ansible; ansible-doc; etc
it has two documentations for
Ansible - opensource\free 
Ansible Tower - proprietary\paid
Documentations split into sections, check out
Module Indes section which will describe Ansible modules with examples
 and stuff

#

##Configuration
Config files:
/etc/ansible/ansible.cfg - has a configuration settings all of which are 
   commented out by default
 'sudo_user' option should be uncommented to be sure, but it is by default
   behaviour
 could be placed in home dir or current dir or passed via env var
 inventory - path to file where all the Nodes are stored

##Inventory \ Hosts
located in
/etc/ansible/hosts
back it up


###Roles
preset of software to be installed 
so node could done some Role job, like DB or WebServer



[all:vars]  - It could have variables that instruct ansible
ansible_connection = ssh - this instructs ansible how to connect to 
the machines from the groups

groups are started with [<group_name>]
and could has domain names or addresses or other aliases of the kind. i.e.:
[local]
localhost

This is line which inscructs ansible how to connect to particular machine
inside the group - connections string+secret key:
 Example:
<alias> ansible_host=<hostnameOrIP> ansible_user=<user to use> ansible_private_key_file=<path to private ssh key>

###User
create new user for ansible(lets call it ansible), add it to sudoers, because playbooks will fail
in case of password request promt
sudo visudo
 add
ansible ALL=(ALL)	NOPASSWD: ALL

!! This user account need to be created on EACH of the nodes
!! and also need to be added to sudoers file

###SSH Keys
it is probably good practice to have key files generated and used for shh 
connection:
from under ansible user on Control Node generate keys:
  ssh-keygen
then copy public keys to other nodes:
  ssh-copy-id <other_node_address>
    ssh-copy-id 172.31.96.63 - will copy key to other machine, it somewhy did
     not work with domain name like doss12.mylabserver.com
!NOTE!:
  SSH Key also need to be copied to local machine, because Ansible will use SSH
   and SSH will try to connect to local machine via SSH and will ask for 
   password too

##Parallelism
  By default Ansible executeds commands in parallel on multiple servers;
  So for all servers in the group command will be executed in different 
  process(fork). This behaviour could be disabled(config) or altered by -f param
  of ansible cli (see -f below)

ansible:
--version - returns version name and configuration info like config file 
  locations, paths, modules locations etc.
--list-hosts - list all hosts from Inventory
  requires pattern to look for either group name or hostname
   Example:
  ansible my_group --list-hosts - will list hosts from the group
  ansible 192.* --list-hosts - will list all hosts starting from 192.

 all - executed from command line for all items in 
	Inventory (/etc/ansible/hosts)
  Or use name of the section from Inventory file instead of 'all'
 --limit "<ip/hostname>" - limit operation to only given ip\hostname from
  the group selected from inventory file
   Example:
  ansible app -b -a "service ntpd restart" --limit "192.168.60.4"
  could use regex when prefixed with ~
   Example:
  ansible app -b -a "service ntpd restart" --limit ~".*\.4"
  or wildcards
   Example:
  ansible app -b -a "service ntpd restart" --limit "*.4"
  This also works with --list-hosts to test the pattern:
   Example:
  ansible app --list-hosts -limit ~".*\.4"  
    will return only matched hosts from the group
 -m - Module to use
   ansible all -m ping - will ping-pong all items, green output is good
	red - bad, it could be if user is prompted for password enter
	in this case use ssh-keys authentification, as described in SSH Keys
	section above
   ansible centos -m copy -a "src=test.txt dest=/tmp/test.txt" - 
	Use module called 'copy'(copy files) with Attributes of
	src - source file (accepts relative path) test.txt located in current
	 directory
	dest - destination path on machines from a group 'centos'
 -a - Attributes. everything after it will be executed as a command
   ansible all -a "ls -la /home/ansible" - will return a section for each entry
	in Inventory, with executed ls -la command
	It returns 
	Name of the machine 
	Result - SUCCESS
	rc=0 - return code
	and command line output of executed command
 -s - SUDO, use elevated privileges, or something like that DEPRECATED
 -f - forks number, Ansible executes in parallel , but amount of forked processes
      could be set manually
       Example:
      ansible multi -a "hostname" -f 1 - execute hostname on all servers in
		group 'multi' with only 1 fork, so sequentally
 -b --become - use to Become a SUDO
	this could also want a password for Root or user with root privileges:
	    "module_stderr": "Shared connection to localhost closed.\r\n",
	    "module_stdout": "sudo: a password is required\r\n",
	https://stackoverflow.com/questions/21870083/specify-sudo-password-for-ansible
     Example use this line:
   ansible local -b --extra-vars "ansible_become_pass=LAvmCenAns" -a "cat /var/log/messages"
	 --extra-vars proides extra parameters sent into execution 
		key value pairs, like name=value
		ansible_become_pass - special Ansible variable to store pass
  -K --ask-become-pass - prompts for sudo password manual entry

##Env Vars  
ANSIBLE_HOST_KEY_CHECKING=False  - this will not do first-time key check during 
first time login, supressing message 'The authenticity of host '192.168.60.5 
(192.168.60.5)' can't be established.'; followed by manual input of yes/no

##Modules
ping - checks nodes, like pings and pongs back
copy - copies files, requires attributes (-a)
	src=<relative\absolute path> - source path
	dest=<path> - destination path, where to copy a source 
	Example:
	ansible centos -m copy -a "src=./ansible/test.txt dest=/tmp/test.txt"
apt - installs packages (UBUNTU only), attributes:
	name=<package_name> - package to do something with
	state=<state> - state of package to be after command executed:
	  present - installs package if abscent, does nothing otherwise
	  latest - installs latests version of package, even if older exists
	  absent - makes sure package is absent
yum - installs packages for CentOS7
   Example:
  ansible multi -b -m yum -a "name=ntp state=present"
easy_install - module for python libraries installation, analog for pip
  see differences between easy_install and pip here:
  https://packaging.python.org/discussions/pip-vs-easy-install/
   Example:
  ansible app -b -m easy_install -a "name=django<2 state=present"
   install django
  ansible app -a "python -c 'import django; print django.get_version()'"
   checks that django installed correctly

service - wrapper around systemd and other services managers
   Example:
  ansible multi -b -m service -a "name=ntpd state=started enabled=yes"
user - adds users, parameters:
	name=<username> - username for user to be created
	state=<state>
	  absent - remove the user
shell - run command in the shell utilizing Ansible abstraction and idempotency 
  powers
   Example:
  ansible multi -m shell -a "date"
setup - gather facts checked by default and display it
	ansible all -m setup - will return facts about all groups in Inventory
	Parameters:
:	filter=<value> - filter output by some keywords, accepts wildcards
	Example:
	ansible all -m setup -a "filter=*ipv4*" - will return all the sections 
	 and their parents that contain keyword
:	--tree <dir_name> - saves all the facts in JSON format into a directory
	 creating file for each host, named by that host name in Inventory
	Example:
	ansible centos -m setup --tree facts - will create dir facts with file
	for each machine from centos group, that file will contain all the
	facts gathered for that particular machine. And will be named after the
	hostname from Inventory for that machine
	Tree could be used the check all the available facts, forfurther filtering
group - manages groups
	name=[groupname]
	state=absent - to delete
	state=present - to add
	git=[gid] - to manually set group id
	system=yes - indicate that group is system
user - manages users
	name=[username] - username
	group=[groupname] - add to existing group
	createhome=yes - create home folderin /home/username
	generate_ssh_key=yes - add ssh key for user logon
	uid=[uid] - manually sed user id
	shell=[shell] - specify different shell(/bin/bash is default)
	password=[encrypted-password] - set user password, not sure with 'encrypted'
	remove=yes - delete user
	state=absent
stat - just regular stat command but as a module. Returns JSON
 	path=/path/to/file - sets path to get stats about
copy - copies files between hosts. Good for single files or small dirs
	src=</path/to/file/or/dir[/]> - with trailing slash copies directory with
	 its contents, w/o slash - copies only directory contents w/o dir itself
	dest=/path/where/to/put
	 Example:
	ansible multi -m copy -a "src=/etc/hosts dest=/tmp/hosts"
synchronize - copy, good for lots of files, nested dirs etc
rsync - copy, good for lots of files, nested dirs etc
 If need to copy lots of files in many dirs use archive and unpack with:
unarchive - unpacks the archive(not sure about compression here)
fetch - same as copy but vice versa to get files from remote machines onto server
	 for multiple servers create directory with ip/hostname in 'dest' and
 	 puts fetched stuff there keeping dir structure
	src=/path/to/source
	dest=/path/to/dir
	 Example:
	ansible multi -b -m fetch -a "src=/etc/hosts dest=/tmp"
	 Result:
	$ tree /tmp/192.*
        /tmp/192.168.60.4
        └── [4.2K]  etc
            └── [ 191]  hosts
        /tmp/192.168.60.5
        └── [4.2K]  etc
            └── [ 191]  hosts
        /tmp/192.168.60.6
        └── [4.2K]  etc
            └── [ 187]  hosts
	flat=yes - with dest=/path/ with trailing slash - will fetch files directly
	 in the 'dest' dir, but names need to be Uniq
file - create files and directoreis(like touch), manage permissions and ownership
	 on files and directories, modife SELinux properties and create symlinks
	dest=/path/to/file
	mode=644 - octal ownership
	state=directory - entity of a file(in this case it is directory)
	     =link - creates symlink
	     =absent - deletes stuff
	force=yes - force creation of dirs in the middle of path for dest(?)
	 Example:
	ansible multi -m file -a "dest=/tmp/test mode=644 state=directory"
	 Example symlink:
	ansible multi -m file -a "src=/src/file dest=/dest/symlink state=link"
       The src is the symlink’s target file, and the dest is the path where 
	the symlink itself should be.


##Playbooks
ansible-playbook:
 to execute playbooks
 ansible-playbook <playbook.yaml>

 -i - change default hosts location
 Example:
 ansible-playbook -i /path/to/hosts playbookd.yml

####Playbooks structure:
hosts: <hosts to be executed upon>
tasks: 
  - shell: <command to be executed in 'shell' task>
  <-another task, like 'yum'>
