how to properly import all packages from other places than current directory:
https://stackoverflow.com/a/34066989
how to change PYTHONPATH:
http://ask.xmodulo.com/change-syspath-pythonpath-python.html

53 Interview Questions and Answers:
https://towardsdatascience.com/53-python-interview-questions-and-answers-91fa311eec3f

Install:
RHEL 6/7 :
Centos7:
https://linuxize.com/post/how-to-install-python-3-on-centos-7/

Software collections library, allows multiple versions of same software.
to enable its repos:
  sudo yum install centos-release-scl
to install python36
  sudo yum install rh-python36

to enable python36 for current sessioN:
  scl enable rh-python36 bash

to enable for current user:
  vim  /home/<username>/.bashrc 
   Add following:
  # Add Python 3.6 from RHSCL to my login environment
  source scl_source enable rh-python36
Virtual env / venv:
could be stored in separate directory, i.e. in root of project directory
  mkdir ~/my_new_project
  cd ~/my_new_project
  scl enable rh-python36 bash
  python -m venv my_project_venv
   activate virtual env:
  source my_project_venv/bin/activate
   shell will be prefixed with env:
  (my_project_venv) user@host:~/my_new_project$

 Venv for native python3:
  mkdir -p /path/to/venv/ansible
  pip3 install virtualenv --user
   or `apt info python3-virtualenv -a` which would be LESS appropriate
  python3 -mvenv /path/to/venv/ansible
  source /path/to/venv/ansible/bin/activate
  pip3 install -U pip setuptools
  pip3 install -r /path/to/repo/requirements.txt

 Venv for native python2:
  mkdir -p /path/to/venv/ansible
  pip2 install virtualenv --user
  virtualenv --py python2 /path/to/venv/ansible
   If getting errors upgrade pip for user:
    pip2 install -U pip --user
    ~/.local/bin/pip2 install virtualenv --user
    virtualenv --py python2 /path/to/venv/ansible
  source /path/to/venv/ansible/bin/activate
  pip2 install -U pip setuptools
  pip2 install -r /path/to/repo/requirements.txt




types:
  Bool:
   True
   False
  nothing:
   None - usefull when need to declare empty(not initialized) variable
	Example:
    variable = None
    while (not variable):
      variable = True

not:
  like ! in c#\ruby
   if (not varTrue) == if(!varTrue)

String Interpolation:
  name = 'Chris'
  # 1. f strings
    print(f'Hello {name}')
  # 2. % operator
    print('Hey %s %s' % (name, name))
  # 3. format
    print(
     "My name is {}".format((name))
    )

print:
  2.7
   print "this is string and this is ",variable
   print 'Hello World! I have been seen {} times.\n'.format(count)
  3+
   print("this is string and this is",variable)
   print("test value: {}".format(value))

type:
  get type of object
   Example:
  d = dict()
  type(d)
  >>>  <class 'dict'>

del:
  rermove variable
   Example:
  a = list("a")
  del(a)

len:
  get length of array
   Example:
  d = dict()
  len(d)
  >>> 0

dict:
  d = dict()
  dictionary

list:
  l = list()
   Example:
  >>> a = list(["aaa"])
  >>> a
  ['aaa']
  >>> a = list("aaaa")
  >>> a
  ['a', 'a', 'a', 'a']
   Methods:
  list
  .append(item)
   add item in the end of the list
  .pop
   extract latest item (will remove from list)
  Concat lists:
  

## ternary operators:
 value_if_true if condition else value_if_false
   Example:
  is_nice = True
  state = "nice" if is_nice else "not nice"



if:
  if 1>2:
    print("this will never print")
  elif 1>0:
    print("other")
  else:
    print("last")
  Could check lists and dictionaries:
    approved_versions_dict = dict()
    product = "string"
    version = "string"
    if product in approved_versions_dict and version in approved_versions_dict[product]:
      print("Found 'product' in dict, then found version in dict['product'])
   Type if:
  if type(option) is bool:
    print("option is of 'bool' type")

for:
  iterates list
   Example:
    for item in list:
        print(item)
  Could iterate 2+ lists:
    artifacts = list()
    artifacts_dead = list()
    for artifacts_collection in artifacts_dead, artifacts:
      print("iterating concatenated both lists")


while:
  wile True:
    print "this will print forever"


read\write files 
open('file_path') - opens for 'r' - read, 'r' is default second param
 others:
 'w' : use for writing, creates new file if none, overrides existing
 'w+': write\read, create if none, override
 'a' : use for appending to a file
 'r' : read

stream = open('file/path', 'r')
stream.read() - entire contents as String
stream.readline() - one line and moves cursor forward
stream.readlines() - all lines left after cursor, returns List[string]
stream.close() - need to close unmanaged resources, can only read from 'r'
stream.write() - writes only string w/o carriage return

def:
  def my_method(param1, param2):
    {body}

  def _my_little_private_method(param1, param2):

  def __my_very_private_method(param1, param2):

  privacy is not envorced, just a convention!

exception handling:
  try:
    {try code}
  except <lib.namespace.ExceptionClass> as <var_name>:
    {catch code}
   Example:
    try:
        user = os.environ["ARTI_CLEAN_USER_ARTI"]
        passwd = os.environ["ARTI_CLEAN_PASSWD_ARTI"]
    except KeyError:
        print("set ARTI_CLEAN_USER_ARTI and ARTI_CLEAN_PASSWD_ARTI environment \
               variables before script execution!")
        sys.exit(1)
  Catch any exception:
   1 try:
   2   untrusted.execute()
   3 except Exception as e:
   4   write_to_page( "<p>Error: %s</p>" % str(e) )


pip:
  python libraries manager
   DO NOT UPGRADE PIP WITH PIP --upgrade option
  https://github.com/pypa/pip/issues/5221

 install:
   installs libraries
   -r <file_name>- requirement, takes required packages from a file
	each package name on new line
	 Example:
	Flask   	- will install Flask
	Flask==0.10.1   - will install Flask of given version
 search whether package is installed:
 ALSO NOTICE THAT PIP3 and PIP ARE TWO DIFFERENT PROGRAMS WITH DIFFERENT
 PACKAGES (i believe)  
   sudo apt-get install python-pip
  OR
   pip list <package_name>

mysql+python:
  mysql-connector-python - contains mysql libs for work with database
   how to work with DB:
  https://dev.mysql.com/doc/connector-python/en/connector-python-example-connecting.html
  
  nice example of PYthon+Mysql in DockerCompose 
   https://stackoverflow.com/questions/42106613/docker-compose-mysql-connection-failing

Web Frameworks:
  Flask - small and easy, almost nothing included, does the job, has many custom 
	libraries to close the gap. Good for little projects
  Django - has everything, good for large projects

  Flask vs Djanko vs Pyramid:
    https://www.airpair.com/python/posts/django-flask-pyramid#6-1-demo-app-with-flask
     Flask short tutorial:
    https://www.tutorialspoint.com/flask/flask_wtf.htm
     Flask greater tutorial, also has something with DB connection:
    https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database

COde Style

flake8:
  Checks codde style
   Install:
  pip install flake8 --user
   Use:
  flake8 remove_artifacts.py --ignore=E501

import:
 env variable read:
  import os
  passwd=os.environ["ARTI_CLEAN_PASSWD_DB"]
 regex:
  import re
  matcher = re.compile(r'.*')
   #r'' to escape everything inside of quotes
  matcher.match(text)
   #return bool
  matcher.pattern
   #return string with pattern i.e. ".*"
 exit:
  import sys
  sys.exit(0)
   #0 is exit code
