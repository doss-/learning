find and replace:
:%s/foo/bar/gci
 % 	- all lines [current line only if not specified]
 s 	- substitute - commad for Find and REplace
 /foo/ 	- text to search for
 /bar/ 	- text to replace to
 g 	- all occurances in a line
 c 	- ask for confirmation
 /\<foo\>/ - change only whole words foo
 i 	- case Insensitive
 /foo\c/ - same case insensitive
 I 	- case Sensitive
 
number lines:
  :set numbe


go to line:
  :<line number>
  
  or

  vim +<line number> <file> - opens vim at a given line

change line case:
change case:
  visual select, then press 'u' for lovercase or 'U' to Upper case
   Without Visual select:
  ~     - Inverts the case of current CHARACTER
  g~~   - Inverts the case of current LINE
  guu   - change current LINE Upper > Lower (see above for another method)
  gUU   - change current LINE Lower > Upper
  guw   - change to end of current WORD Upper > Lower
  guaw  - change all of current WORD Upper > Lower
  gUw   - change to end of current WORD Lower > Upper
  gUaw  - change all of current WORD Lower > Upper
  
:scriptnames - displays all the file locations of all the configs loaded for
  vim instance running
:e $MYVIMRC  - open & edit the current .vimrc that you are using, then use 
  Ctrl + G to view the path in status bar.

.vimrc - main config file


Colors:
all the currently available colors are located in
/usr/share/vim/vim74/colors folder

to change color scheme for current session use:
  :color <shceme_name>
   :color desert

to have it loaded automatically add it into vimrc file like:
/etc/vimrc => :color desert

somewhy it does not work when adding ~/.vimrc file, probably it is no tloaded
for some reason, may be need to adjust some configs

Insert space in multilines:
 https://stackoverflow.com/questions/253380/how-do-i-insert-text-at-beginning-of-a-multi-line-selection-in-vi-vim
  
  Esc - enter 'command mode'
  Ctrl + V - visual block mode
  Up\Down - to mark 
  Shift+i - to insert (e.g. space )
  Esc - to apply changes (need to wait some 1 second)


===vimdiff

https://gist.github.com/mattratleph/4026987

##git mergetool

In the middle file (future merged file), you can navigate between conflicts with ]c and [c.

Choose which version you want to keep with :diffget //2 or :diffget //3 (the //2 and //3 are unique identifiers for the target/master copy and the merge/branch copy file names).

:diffupdate (to remove leftover spacing issues)
:only (once you’re done reviewing all conflicts, this shows only the middle/merged file)
:wq (save and quit)
git add .
git commit -m “Merge resolved”

If you were trying to do a git pull when you ran into merge conflicts, type git rebase –continue.

##vimdiff commands

]c :        - next difference
[c :        - previous difference
do          - diff obtain
dp          - diff put
zo          - open folded text
zc          - close folded text
:diffupdate - re-scan the files for differences

